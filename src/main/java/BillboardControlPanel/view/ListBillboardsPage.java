package BillboardControlPanel.view;


import BillboardControlPanel.billboardXML.ReadXmlFile;
import BillboardControlPanel.billboardXML.WritingToXml;
import ServerConnection.Exceptions.ServerClosedException;
import BillboardControlPanel.controller.DAO;

import java.awt.*;

import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.nio.BufferOverflowException;
import java.util.ArrayList;
import java.util.Base64;
import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;

import ServerConnection.Exceptions.SessionExpiredException;
import ServerConnection.ServerConnection;
import BillboardControlPanel.model.Schedule;
import Commmunication.Message;
import Commmunication.Requests.*;
import Commmunication.Response.*;
import BillboardControlPanel.model.Billboard;

import Utils.ColorHelper.ColorHelper;
import Utils.ImageFormatter.ImageFormatter;
import Utils.Token.Token;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Asus
 */
public class ListBillboardsPage extends javax.swing.JFrame {

    /**
     * Creates new form ListBillboardsPage
     */
    private ArrayList<Billboard> listBillboard;
    private ArrayList<Schedule> listSchedule;
    DefaultTableModel model;
    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    private int selectedIndex;
    private String token;
    private String permission;
    private String currentUser;
    private String userId;
    private DAO helper;
    
    public ListBillboardsPage(String token) {

        this.token = token;
        String decodedToken = Token.decodeToken(this.token);
        //Get user information from decoded token
        this.permission = decodedToken.split("%%%%")[2];
        this.currentUser = decodedToken.split("%%%%")[1];
        this.userId = decodedToken.split("%%%%")[0];

        helper = new DAO();
        initComponents();
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        
        inputPanel.setVisible(false);
        fileChooserPanel.setVisible(false);
        billboard_preview_frame.setVisible(false);
        // Can only select xml File for fileXmlChooser
      
        FileNameExtensionFilter xmlFilter = new FileNameExtensionFilter("xml files (*.xml)", "xml");
        fileXmlChooser.setFileFilter(xmlFilter);

        // Can only select bmp, jepg or png image for fileImageChooser
        FileNameExtensionFilter imageFilter = new FileNameExtensionFilter("Image files", "bmp", "jpeg", "png");
        fileImageChooser.setFileFilter(imageFilter);
        fileImageChooser.setVisible(false);

        try{
            listBillboard = new DAO().getListBillboard(this.token);
            listSchedule = new DAO().getListSchedule(this.token);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(listBillboardPanel, e.getMessage());
            System.exit(0);
        }


        model = (DefaultTableModel) billboardTable.getModel();
        model.setColumnIdentifiers(new Object[] {
            "Billboard ID", "User ID", "Message", "Information", "Background color", "Message color","Information color", "Created at", "Update at", "Picture"
        });
        showTable();
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        listBillboardPanel = new javax.swing.JPanel();
        listPanel = new javax.swing.JPanel();
        billboard_preview_frame = new javax.swing.JInternalFrame();
        containerPanelM = new javax.swing.JPanel();
        lbMessageM = new javax.swing.JLabel();
        containerPanelMPI = new javax.swing.JPanel();
        lbPictureMPI = new javax.swing.JLabel();
        lbMessageMPI = new javax.swing.JLabel();
        lbInfoMPI = new javax.swing.JLabel();
        containerPanelI = new javax.swing.JPanel();
        lbInfoI = new javax.swing.JLabel();
        containerPanelMP = new javax.swing.JPanel();
        lbPictureMP = new javax.swing.JLabel();
        lbMessageMP = new javax.swing.JLabel();
        containerPanelMI = new javax.swing.JPanel();
        lbMessageMI = new javax.swing.JLabel();
        lbInfoMI = new javax.swing.JLabel();
        containerPanelPI = new javax.swing.JPanel();
        lbPicturePI = new javax.swing.JLabel();
        lbInfoPI = new javax.swing.JLabel();
        containerPanelP = new javax.swing.JPanel();
        lbPictureP = new javax.swing.JLabel();
        listScrollPanel = new javax.swing.JScrollPane();
        billboardTable = new javax.swing.JTable();
        btnPreview = new javax.swing.JButton();
        lbListTitle = new javax.swing.JLabel();
        btnDeleteTable = new javax.swing.JButton();
        btnEditTable = new javax.swing.JButton();
        sidepanel = new javax.swing.JPanel();
        separator = new javax.swing.JSeparator();
        lbAppNameLeft = new javax.swing.JLabel();
        btnHome = new javax.swing.JPanel();
        lbIconHome = new javax.swing.JLabel();
        lbHome = new javax.swing.JLabel();
        btnCreate = new javax.swing.JPanel();
        lbIconCreate = new javax.swing.JLabel();
        lbCreate = new javax.swing.JLabel();
        btnList = new javax.swing.JPanel();
        lbIconList = new javax.swing.JLabel();
        lbList = new javax.swing.JLabel();
        btnSchedule = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        lbSchedule = new javax.swing.JLabel();
        btnEdit = new javax.swing.JPanel();
        lbIconEdit = new javax.swing.JLabel();
        lbEdit = new javax.swing.JLabel();
        btnLogOut = new javax.swing.JPanel();
        lbIconLogout = new javax.swing.JLabel();
        lbLogout = new javax.swing.JLabel();
        inputPanel = new javax.swing.JPanel();
        lbInputTitle = new javax.swing.JLabel();
        lbMessage = new javax.swing.JLabel();
        lbInfo = new javax.swing.JLabel();
        lbPicture = new javax.swing.JLabel();
        txtPicture = new javax.swing.JTextField();
        txtMessage = new javax.swing.JTextField();
        lbBgColor = new javax.swing.JLabel();
        txtBgColor = new javax.swing.JTextField();
        txtMsColor = new javax.swing.JTextField();
        lbMsColor = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        textScrollPanel = new javax.swing.JScrollPane();
        txtInformation = new javax.swing.JTextArea();
        btnSave = new javax.swing.JButton();
        lbBillboardId = new javax.swing.JLabel();
        txtBillboardId = new javax.swing.JTextField();
        btnChooseBgColor = new javax.swing.JButton();
        btnChooseMsColor = new javax.swing.JButton();
        btnChooseImage = new javax.swing.JButton();
        lbInfoColor = new javax.swing.JLabel();
        txtInfoColor = new javax.swing.JTextField();
        btnChooseInfoColor = new javax.swing.JButton();
        btnExport = new javax.swing.JButton();
        btnImport = new javax.swing.JButton();
        lbBackground = new javax.swing.JLabel();
        welcomePanel = new javax.swing.JPanel();
        lbWelcomeTitle = new javax.swing.JLabel();
        lbWelcomeInfo = new javax.swing.JLabel();
        lbAppName = new javax.swing.JLabel();
        lbClose = new javax.swing.JLabel();
        lbUserInfo = new javax.swing.JLabel();
        fileChooserPanel = new javax.swing.JPanel();
        fileImageChooser = new javax.swing.JFileChooser();
        fileXmlChooser = new javax.swing.JFileChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        listBillboardPanel.setBackground(new java.awt.Color(255, 255, 255));
        listBillboardPanel.setMinimumSize(new java.awt.Dimension(1920, 1080));
        listBillboardPanel.setPreferredSize(new java.awt.Dimension(1920, 1080));
        listBillboardPanel.setLayout(null);

        listPanel.setLayout(null);

        billboard_preview_frame.setClosable(true);
        billboard_preview_frame.setNormalBounds(new java.awt.Rectangle(0, 0, 0, 0));
        billboard_preview_frame.setVisible(true);

        containerPanelM.setBackground(new java.awt.Color(153, 255, 51));
        containerPanelM.setPreferredSize(new java.awt.Dimension(750, 450));

        lbMessageM.setFont(new java.awt.Font("MV Boli", 0, 36)); // NOI18N
        lbMessageM.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMessageM.setToolTipText("");
        lbMessageM.setPreferredSize(new java.awt.Dimension(480, 420));
        lbMessageM.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout containerPanelMLayout = new javax.swing.GroupLayout(containerPanelM);
        containerPanelM.setLayout(containerPanelMLayout);
        containerPanelMLayout.setHorizontalGroup(
            containerPanelMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerPanelMLayout.createSequentialGroup()
                .addContainerGap(135, Short.MAX_VALUE)
                .addComponent(lbMessageM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135))
        );
        containerPanelMLayout.setVerticalGroup(
            containerPanelMLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelMLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbMessageM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        containerPanelMPI.setBackground(new java.awt.Color(153, 255, 51));
        containerPanelMPI.setPreferredSize(new java.awt.Dimension(750, 450));

        lbPictureMPI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPictureMPI.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbPictureMPI.setMaximumSize(new java.awt.Dimension(960, 540));
        lbPictureMPI.setMinimumSize(new java.awt.Dimension(960, 540));
        lbPictureMPI.setPreferredSize(new java.awt.Dimension(480, 140));

        lbMessageMPI.setFont(new java.awt.Font("MV Boli", 0, 36)); // NOI18N
        lbMessageMPI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMessageMPI.setToolTipText("");
        lbMessageMPI.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbMessageMPI.setPreferredSize(new java.awt.Dimension(480, 140));
        lbMessageMPI.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        lbInfoMPI.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbInfoMPI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbInfoMPI.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbInfoMPI.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbInfoMPI.setPreferredSize(new java.awt.Dimension(480, 140));

        javax.swing.GroupLayout containerPanelMPILayout = new javax.swing.GroupLayout(containerPanelMPI);
        containerPanelMPI.setLayout(containerPanelMPILayout);
        containerPanelMPILayout.setHorizontalGroup(
            containerPanelMPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerPanelMPILayout.createSequentialGroup()
                .addGap(0, 135, Short.MAX_VALUE)
                .addGroup(containerPanelMPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbInfoMPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPictureMPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbMessageMPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(135, 135, 135))
        );
        containerPanelMPILayout.setVerticalGroup(
            containerPanelMPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelMPILayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbMessageMPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbPictureMPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addComponent(lbInfoMPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        containerPanelI.setBackground(new java.awt.Color(153, 255, 51));
        containerPanelI.setPreferredSize(new java.awt.Dimension(750, 450));

        lbInfoI.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        lbInfoI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbInfoI.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbInfoI.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbInfoI.setPreferredSize(new java.awt.Dimension(480, 280));

        javax.swing.GroupLayout containerPanelILayout = new javax.swing.GroupLayout(containerPanelI);
        containerPanelI.setLayout(containerPanelILayout);
        containerPanelILayout.setHorizontalGroup(
            containerPanelILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerPanelILayout.createSequentialGroup()
                .addContainerGap(135, Short.MAX_VALUE)
                .addComponent(lbInfoI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(135, 135, 135))
        );
        containerPanelILayout.setVerticalGroup(
            containerPanelILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelILayout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(lbInfoI, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        containerPanelMP.setBackground(new java.awt.Color(153, 255, 51));
        containerPanelMP.setPreferredSize(new java.awt.Dimension(750, 450));

        lbPictureMP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPictureMP.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbPictureMP.setMaximumSize(new java.awt.Dimension(960, 540));
        lbPictureMP.setMinimumSize(new java.awt.Dimension(960, 540));
        lbPictureMP.setPreferredSize(new java.awt.Dimension(480, 270));

        lbMessageMP.setFont(new java.awt.Font("MV Boli", 0, 36)); // NOI18N
        lbMessageMP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMessageMP.setToolTipText("");
        lbMessageMP.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbMessageMP.setPreferredSize(new java.awt.Dimension(480, 140));
        lbMessageMP.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout containerPanelMPLayout = new javax.swing.GroupLayout(containerPanelMP);
        containerPanelMP.setLayout(containerPanelMPLayout);
        containerPanelMPLayout.setHorizontalGroup(
            containerPanelMPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerPanelMPLayout.createSequentialGroup()
                .addContainerGap(135, Short.MAX_VALUE)
                .addGroup(containerPanelMPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbMessageMP, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPictureMP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(135, 135, 135))
        );
        containerPanelMPLayout.setVerticalGroup(
            containerPanelMPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelMPLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(lbMessageMP, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbPictureMP, javax.swing.GroupLayout.PREFERRED_SIZE, 277, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );

        containerPanelMI.setBackground(new java.awt.Color(153, 255, 51));
        containerPanelMI.setPreferredSize(new java.awt.Dimension(750, 450));

        lbMessageMI.setFont(new java.awt.Font("MV Boli", 0, 36)); // NOI18N
        lbMessageMI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbMessageMI.setToolTipText("");
        lbMessageMI.setVerticalAlignment(javax.swing.SwingConstants.BOTTOM);
        lbMessageMI.setPreferredSize(new java.awt.Dimension(480, 210));
        lbMessageMI.setVerticalTextPosition(javax.swing.SwingConstants.TOP);

        lbInfoMI.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbInfoMI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbInfoMI.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbInfoMI.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbInfoMI.setPreferredSize(new java.awt.Dimension(480, 210));

        javax.swing.GroupLayout containerPanelMILayout = new javax.swing.GroupLayout(containerPanelMI);
        containerPanelMI.setLayout(containerPanelMILayout);
        containerPanelMILayout.setHorizontalGroup(
            containerPanelMILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelMILayout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addComponent(lbInfoMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(135, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, containerPanelMILayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbMessageMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(127, 127, 127))
        );
        containerPanelMILayout.setVerticalGroup(
            containerPanelMILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelMILayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbMessageMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbInfoMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        containerPanelPI.setBackground(new java.awt.Color(153, 255, 51));
        containerPanelPI.setPreferredSize(new java.awt.Dimension(750, 450));

        lbPicturePI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPicturePI.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbPicturePI.setMaximumSize(new java.awt.Dimension(960, 540));
        lbPicturePI.setMinimumSize(new java.awt.Dimension(960, 540));
        lbPicturePI.setPreferredSize(new java.awt.Dimension(480, 270));

        lbInfoPI.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lbInfoPI.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbInfoPI.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        lbInfoPI.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbInfoPI.setPreferredSize(new java.awt.Dimension(480, 140));

        javax.swing.GroupLayout containerPanelPILayout = new javax.swing.GroupLayout(containerPanelPI);
        containerPanelPI.setLayout(containerPanelPILayout);
        containerPanelPILayout.setHorizontalGroup(
            containerPanelPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelPILayout.createSequentialGroup()
                .addGap(135, 135, 135)
                .addGroup(containerPanelPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbInfoPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPicturePI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(135, Short.MAX_VALUE))
        );
        containerPanelPILayout.setVerticalGroup(
            containerPanelPILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelPILayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbPicturePI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbInfoPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        containerPanelP.setBackground(new java.awt.Color(153, 255, 51));
        containerPanelP.setPreferredSize(new java.awt.Dimension(750, 450));

        lbPictureP.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPictureP.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbPictureP.setMaximumSize(new java.awt.Dimension(960, 540));
        lbPictureP.setMinimumSize(new java.awt.Dimension(960, 540));
        lbPictureP.setPreferredSize(new java.awt.Dimension(480, 285));

        javax.swing.GroupLayout containerPanelPLayout = new javax.swing.GroupLayout(containerPanelP);
        containerPanelP.setLayout(containerPanelPLayout);
        containerPanelPLayout.setHorizontalGroup(
            containerPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelPLayout.createSequentialGroup()
                .addGap(133, 133, 133)
                .addComponent(lbPictureP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(137, Short.MAX_VALUE))
        );
        containerPanelPLayout.setVerticalGroup(
            containerPanelPLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(containerPanelPLayout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(lbPictureP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(83, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout billboard_preview_frameLayout = new javax.swing.GroupLayout(billboard_preview_frame.getContentPane());
        billboard_preview_frame.getContentPane().setLayout(billboard_preview_frameLayout);
        billboard_preview_frameLayout.setHorizontalGroup(
            billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 750, Short.MAX_VALUE)
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelMPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelMP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        billboard_preview_frameLayout.setVerticalGroup(
            billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 470, Short.MAX_VALUE)
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelMPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelMP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelMI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelPI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(billboard_preview_frameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(billboard_preview_frameLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(containerPanelP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        listPanel.add(billboard_preview_frame);
        billboard_preview_frame.setBounds(130, 110, 766, 500);

        billboardTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Billboard ID", "User ID", "Message", "Information", "Background color", "Message color", "Information color", "Created at", "Update at", "Picture"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        listScrollPanel.setViewportView(billboardTable);

        listPanel.add(listScrollPanel);
        listScrollPanel.setBounds(24, 59, 922, 575);

        btnPreview.setBackground(new java.awt.Color(90, 148, 210));
        btnPreview.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnPreview.setForeground(new java.awt.Color(255, 255, 255));
        btnPreview.setText("Preview");
        btnPreview.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnPreview.setBorderPainted(false);
        btnPreview.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnPreview.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviewActionPerformed(evt);
            }
        });
        listPanel.add(btnPreview);
        btnPreview.setBounds(433, 668, 104, 39);

        lbListTitle.setBackground(new java.awt.Color(0, 0, 0));
        lbListTitle.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        lbListTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbListTitle.setText("Billboards List");
        lbListTitle.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        listPanel.add(lbListTitle);
        lbListTitle.setBounds(288, 20, 355, 21);

        btnDeleteTable.setBackground(new java.awt.Color(90, 148, 210));
        btnDeleteTable.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnDeleteTable.setForeground(new java.awt.Color(255, 255, 255));
        btnDeleteTable.setText("Delete");
        btnDeleteTable.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnDeleteTable.setBorderPainted(false);
        btnDeleteTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnDeleteTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteTableActionPerformed(evt);
            }
        });
        listPanel.add(btnDeleteTable);
        btnDeleteTable.setBounds(689, 668, 104, 39);

        btnEditTable.setBackground(new java.awt.Color(90, 148, 210));
        btnEditTable.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnEditTable.setForeground(new java.awt.Color(255, 255, 255));
        btnEditTable.setText("Edit");
        btnEditTable.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnEditTable.setBorderPainted(false);
        btnEditTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnEditTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditTableActionPerformed(evt);
            }
        });
        listPanel.add(btnEditTable);
        btnEditTable.setBounds(178, 668, 104, 39);

        listBillboardPanel.add(listPanel);
        listPanel.setBounds(420, 280, 980, 740);

        sidepanel.setBackground(new java.awt.Color(54, 33, 89));
        sidepanel.setPreferredSize(new Dimension(screenSize.width / 5, screenSize.height));
        sidepanel.setLayout(null);

        separator.setPreferredSize(new java.awt.Dimension(50, 5));
        sidepanel.add(separator);
        separator.setBounds(30, 90, 220, 10);

        lbAppNameLeft.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbAppNameLeft.setForeground(new java.awt.Color(204, 204, 204));
        lbAppNameLeft.setText("BBCreator");
        sidepanel.add(lbAppNameLeft);
        lbAppNameLeft.setBounds(30, 50, 115, 32);

        btnHome.setBackground(new java.awt.Color(64, 43, 100));
        btnHome.setPreferredSize(new Dimension(screenSize.width / 5, 50) );
        btnHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnHomeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnHomeMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbIconHomeMousePressed(evt);
            }
        });

        lbIconHome.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbIconHome.setIcon(new javax.swing.ImageIcon("src/main/java/BillboardControlPanel/view/images/icons8_home_15px_1.png")); // NOI18N
        lbIconHome.setToolTipText("");
        lbIconHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbIconHomebtn_homeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbIconHomebtn_homeMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbIconHomeMousePressed(evt);
            }
        });

        lbHome.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbHome.setForeground(new java.awt.Color(204, 204, 204));
        lbHome.setText("Home");
        lbHome.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbHomebtn_homeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbHomebtn_homeMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbIconHomeMousePressed(evt);
            }
        });

        javax.swing.GroupLayout btnHomeLayout = new javax.swing.GroupLayout(btnHome);
        btnHome.setLayout(btnHomeLayout);
        btnHomeLayout.setHorizontalGroup(
            btnHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnHomeLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lbIconHome, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbHome)
                .addContainerGap(272, Short.MAX_VALUE))
        );
        btnHomeLayout.setVerticalGroup(
            btnHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnHomeLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(btnHomeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbHome)
                    .addComponent(lbIconHome, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        sidepanel.add(btnHome);
        btnHome.setBounds(0, 190, 384, 50);

        btnCreate.setBackground(new java.awt.Color(64, 43, 100));
        btnCreate.setPreferredSize(new Dimension(screenSize.width / 5, 50 ));
        btnCreate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCreateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCreateMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnCreateMousePressed(evt);
            }
        });

        lbIconCreate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbIconCreate.setIcon(new javax.swing.ImageIcon("src/main/java/BillboardControlPanel/view/images/icons8_create_15px.png")); // NOI18N
        lbIconCreate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCreateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCreateMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnCreateMousePressed(evt);
            }
        });

        lbCreate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbCreate.setForeground(new java.awt.Color(204, 204, 204));
        lbCreate.setText("Create Billboards");
        lbCreate.setToolTipText("");
        lbCreate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnCreateMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnCreateMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnCreateMousePressed(evt);
            }
        });

        javax.swing.GroupLayout btnCreateLayout = new javax.swing.GroupLayout(btnCreate);
        btnCreate.setLayout(btnCreateLayout);
        btnCreateLayout.setHorizontalGroup(
            btnCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnCreateLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lbIconCreate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbCreate)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        btnCreateLayout.setVerticalGroup(
            btnCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnCreateLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(btnCreateLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbIconCreate, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(lbCreate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        sidepanel.add(btnCreate);
        btnCreate.setBounds(0, 240, 384, 50);

        btnList.setBackground(new java.awt.Color(85, 65, 118));
        btnList.setPreferredSize(new Dimension(screenSize.width / 5, 50 ));
        btnList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnListMousePressed(evt);
            }
        });

        lbIconList.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbIconList.setIcon(new javax.swing.ImageIcon("src/main/java/BillboardControlPanel/view/images/icons8_list_15px.png")); // NOI18N
        lbIconList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbIconListlb_list_billboardsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbIconListlb_list_billboardsMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnListMousePressed(evt);
            }
        });

        lbList.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbList.setForeground(new java.awt.Color(204, 204, 204));
        lbList.setText("List Billboards");
        lbList.setToolTipText("");
        lbList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbListMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbListMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnListMousePressed(evt);
            }
        });

        javax.swing.GroupLayout btnListLayout = new javax.swing.GroupLayout(btnList);
        btnList.setLayout(btnListLayout);
        btnListLayout.setHorizontalGroup(
            btnListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnListLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lbIconList, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbList)
                .addContainerGap(223, Short.MAX_VALUE))
        );
        btnListLayout.setVerticalGroup(
            btnListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnListLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(btnListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbList, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(lbIconList, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addContainerGap())
        );

        sidepanel.add(btnList);
        btnList.setBounds(0, 290, 384, 50);

        btnSchedule.setBackground(new java.awt.Color(64, 43, 100));
        btnSchedule.setPreferredSize(new Dimension(screenSize.width / 5, 50 ));
        btnSchedule.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnSchedulelb_schedule_billboardsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnSchedulelb_schedule_billboardsMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbScheduleMousePressed(evt);
            }
        });

        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setIcon(new javax.swing.ImageIcon("src/main/java/BillboardControlPanel/view/images/icons8_schedule_15px_1.png")); // NOI18N
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel14lb_schedule_billboardsMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel14lb_schedule_billboardsMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbScheduleMousePressed(evt);
            }
        });

        lbSchedule.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbSchedule.setForeground(new java.awt.Color(204, 204, 204));
        lbSchedule.setText("Schedule Billboards");
        lbSchedule.setToolTipText("");
        lbSchedule.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbScheduleMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbScheduleMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbScheduleMousePressed(evt);
            }
        });

        javax.swing.GroupLayout btnScheduleLayout = new javax.swing.GroupLayout(btnSchedule);
        btnSchedule.setLayout(btnScheduleLayout);
        btnScheduleLayout.setHorizontalGroup(
            btnScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnScheduleLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbSchedule)
                .addContainerGap(185, Short.MAX_VALUE))
        );
        btnScheduleLayout.setVerticalGroup(
            btnScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnScheduleLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(btnScheduleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(lbSchedule, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        sidepanel.add(btnSchedule);
        btnSchedule.setBounds(0, 340, 384, 50);

        btnEdit.setBackground(new java.awt.Color(64, 43, 100));
        btnEdit.setPreferredSize(new Dimension(screenSize.width / 5, 50 ));
        btnEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnEditjLabel16MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnEditjLabel16MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnEditMousePressed(evt);
            }
        });

        lbIconEdit.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbIconEdit.setIcon(new javax.swing.ImageIcon("src/main/java/BillboardControlPanel/view/images/icons8_edit_profile_15px_1.png")); // NOI18N
        lbIconEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbIconEditMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbIconEditMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnEditMousePressed(evt);
            }
        });

        lbEdit.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbEdit.setForeground(new java.awt.Color(204, 204, 204));
        lbEdit.setText("Edit Users");
        lbEdit.setToolTipText("");
        lbEdit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                lbEditjLabel16MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                lbEditjLabel16MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnEditMousePressed(evt);
            }
        });

        javax.swing.GroupLayout btnEditLayout = new javax.swing.GroupLayout(btnEdit);
        btnEdit.setLayout(btnEditLayout);
        btnEditLayout.setHorizontalGroup(
            btnEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnEditLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lbIconEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbEdit)
                .addContainerGap(252, Short.MAX_VALUE))
        );
        btnEditLayout.setVerticalGroup(
            btnEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnEditLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(btnEditLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbIconEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbEdit, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addContainerGap())
        );

        sidepanel.add(btnEdit);
        btnEdit.setBounds(0, 390, 384, 50);

        btnLogOut.setBackground(new java.awt.Color(64, 43, 100));
        btnLogOut.setPreferredSize(new Dimension(screenSize.width / 5, 50 ));
        btnLogOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbLogoutMousePressed(evt);
            }
        });

        lbIconLogout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbIconLogout.setIcon(new javax.swing.ImageIcon("src/main/java/BillboardControlPanel/view/images/icons8_logout_rounded_left_15px.png")); // NOI18N
        lbIconLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbLogoutMousePressed(evt);
            }
        });

        lbLogout.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lbLogout.setForeground(new java.awt.Color(204, 204, 204));
        lbLogout.setText("Log Out");
        lbLogout.setToolTipText("");
        lbLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbLogoutMousePressed(evt);
            }
        });

        javax.swing.GroupLayout btnLogOutLayout = new javax.swing.GroupLayout(btnLogOut);
        btnLogOut.setLayout(btnLogOutLayout);
        btnLogOutLayout.setHorizontalGroup(
            btnLogOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(btnLogOutLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lbIconLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbLogout)
                .addContainerGap(264, Short.MAX_VALUE))
        );
        btnLogOutLayout.setVerticalGroup(
            btnLogOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, btnLogOutLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(btnLogOutLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbIconLogout, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbLogout, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE))
                .addContainerGap())
        );

        sidepanel.add(btnLogOut);
        btnLogOut.setBounds(0, 950, 384, 60);

        listBillboardPanel.add(sidepanel);
        sidepanel.setBounds(0, 0, 384, 1080);

        inputPanel.setBackground(new java.awt.Color(250, 250, 250));
        inputPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204), new java.awt.Color(204, 204, 204)));

        lbInputTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbInputTitle.setForeground(new java.awt.Color(90, 148, 210));
        lbInputTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbInputTitle.setText("Start edit your billboard");

        lbMessage.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbMessage.setForeground(new java.awt.Color(90, 148, 210));
        lbMessage.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbMessage.setText("Name your billboard");

        lbInfo.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbInfo.setForeground(new java.awt.Color(90, 148, 210));
        lbInfo.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbInfo.setText("Describe your billboard");

        lbPicture.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbPicture.setForeground(new java.awt.Color(90, 148, 210));
        lbPicture.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbPicture.setText("Add inspiration image (Choose your image or add URL)");

        txtPicture.setBackground(new java.awt.Color(250, 250, 250));
        txtPicture.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtPicture.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(12, 91, 160)));
        txtPicture.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtPictureMouseClicked(evt);
            }
        });

        txtMessage.setBackground(new java.awt.Color(250, 250, 250));
        txtMessage.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtMessage.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(12, 91, 160)));

        lbBgColor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbBgColor.setForeground(new java.awt.Color(90, 148, 210));
        lbBgColor.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbBgColor.setText("Choose background color");

        txtBgColor.setBackground(new java.awt.Color(250, 250, 250));
        txtBgColor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBgColor.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(12, 91, 160)));

        txtMsColor.setBackground(new java.awt.Color(250, 250, 250));
        txtMsColor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtMsColor.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(12, 91, 160)));

        lbMsColor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbMsColor.setForeground(new java.awt.Color(90, 148, 210));
        lbMsColor.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbMsColor.setText("Choose message color");

        btnCancel.setBackground(new java.awt.Color(90, 148, 210));
        btnCancel.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnCancel.setForeground(new java.awt.Color(255, 255, 255));
        btnCancel.setText("Cancel");
        btnCancel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnCancel.setBorderPainted(false);
        btnCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        txtInformation.setColumns(20);
        txtInformation.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtInformation.setLineWrap(true);
        txtInformation.setRows(5);
        txtInformation.setWrapStyleWord(true);
        txtInformation.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(12, 91, 160)));
        textScrollPanel.setViewportView(txtInformation);

        btnSave.setBackground(new java.awt.Color(90, 148, 210));
        btnSave.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setText("Save");
        btnSave.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnSave.setBorderPainted(false);
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        lbBillboardId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbBillboardId.setForeground(new java.awt.Color(90, 148, 210));
        lbBillboardId.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbBillboardId.setText("Billboard ID");

        txtBillboardId.setBackground(new java.awt.Color(250, 250, 250));
        txtBillboardId.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtBillboardId.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(12, 91, 160)));

        btnChooseBgColor.setBackground(new java.awt.Color(90, 148, 210));
        btnChooseBgColor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnChooseBgColor.setForeground(new java.awt.Color(255, 255, 255));
        btnChooseBgColor.setText("Choose color");
        btnChooseBgColor.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnChooseBgColor.setBorderPainted(false);
        btnChooseBgColor.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnChooseBgColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseBgColorActionPerformed(evt);
            }
        });

        btnChooseMsColor.setBackground(new java.awt.Color(90, 148, 210));
        btnChooseMsColor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnChooseMsColor.setForeground(new java.awt.Color(255, 255, 255));
        btnChooseMsColor.setText("Choose color");
        btnChooseMsColor.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnChooseMsColor.setBorderPainted(false);
        btnChooseMsColor.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnChooseMsColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseMsColorActionPerformed(evt);
            }
        });

        btnChooseImage.setBackground(new java.awt.Color(90, 148, 210));
        btnChooseImage.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnChooseImage.setForeground(new java.awt.Color(255, 255, 255));
        btnChooseImage.setText("Choose image");
        btnChooseImage.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnChooseImage.setBorderPainted(false);
        btnChooseImage.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnChooseImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseImageActionPerformed(evt);
            }
        });

        lbInfoColor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lbInfoColor.setForeground(new java.awt.Color(90, 148, 210));
        lbInfoColor.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbInfoColor.setText("Choose information color");

        txtInfoColor.setBackground(new java.awt.Color(250, 250, 250));
        txtInfoColor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtInfoColor.setBorder(javax.swing.BorderFactory.createMatteBorder(2, 2, 2, 2, new java.awt.Color(12, 91, 160)));

        btnChooseInfoColor.setBackground(new java.awt.Color(90, 148, 210));
        btnChooseInfoColor.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnChooseInfoColor.setForeground(new java.awt.Color(255, 255, 255));
        btnChooseInfoColor.setText("Choose color");
        btnChooseInfoColor.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnChooseInfoColor.setBorderPainted(false);
        btnChooseInfoColor.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnChooseInfoColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseInfoColorActionPerformed(evt);
            }
        });

        btnExport.setBackground(new java.awt.Color(90, 148, 210));
        btnExport.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnExport.setForeground(new java.awt.Color(255, 255, 255));
        btnExport.setText("Export");
        btnExport.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnExport.setBorderPainted(false);
        btnExport.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnImport.setBackground(new java.awt.Color(90, 148, 210));
        btnImport.setFont(new java.awt.Font("Arial", 0, 18)); // NOI18N
        btnImport.setForeground(new java.awt.Color(255, 255, 255));
        btnImport.setText("Import");
        btnImport.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        btnImport.setBorderPainted(false);
        btnImport.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnImport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout inputPanelLayout = new javax.swing.GroupLayout(inputPanel);
        inputPanel.setLayout(inputPanelLayout);
        inputPanelLayout.setHorizontalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbInputTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputPanelLayout.createSequentialGroup()
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addComponent(txtInfoColor, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnChooseInfoColor, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(textScrollPanel)
                                .addComponent(lbMsColor, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtMessage)
                                .addComponent(lbInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(txtBillboardId)
                                .addComponent(lbBillboardId, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbPicture, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(inputPanelLayout.createSequentialGroup()
                                    .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtMsColor, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lbBgColor, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtBgColor, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(txtPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(lbInfoColor, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGap(18, 18, 18)
                                    .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(btnChooseMsColor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnChooseImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(inputPanelLayout.createSequentialGroup()
                                            .addComponent(btnChooseBgColor, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(0, 0, Short.MAX_VALUE)))))))
                    .addGroup(inputPanelLayout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(inputPanelLayout.createSequentialGroup()
                                .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(63, 63, 63))
        );
        inputPanelLayout.setVerticalGroup(
            inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lbInputTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbBillboardId, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtBillboardId, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(textScrollPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPicture, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseImage, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbBgColor, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBgColor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseBgColor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbMsColor, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtMsColor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseMsColor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbInfoColor, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtInfoColor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnChooseInfoColor, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnImport, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnExport, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(inputPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        listBillboardPanel.add(inputPanel);
        inputPanel.setBounds(1430, 280, 470, 740);

        lbBackground.setBackground(new java.awt.Color(245, 245, 245));
        lbBackground.setIcon(new javax.swing.ImageIcon("src/main/java/BillboardControlPanel/view/images/bg_blue.png")); // NOI18N
        listBillboardPanel.add(lbBackground);
        lbBackground.setBounds(384, 250, 1536, 830);

        welcomePanel.setBackground(new java.awt.Color(110, 89, 222));
        welcomePanel.setPreferredSize(new Dimension(screenSize.width / 5 * 4, 150 ));

        lbWelcomeTitle.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbWelcomeTitle.setForeground(new java.awt.Color(204, 204, 204));
        lbWelcomeTitle.setText("List Billboards");

        lbWelcomeInfo.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        lbWelcomeInfo.setForeground(new java.awt.Color(204, 204, 204));
        lbWelcomeInfo.setText("Display all your billboards ");
        lbWelcomeInfo.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        javax.swing.GroupLayout welcomePanelLayout = new javax.swing.GroupLayout(welcomePanel);
        welcomePanel.setLayout(welcomePanelLayout);
        welcomePanelLayout.setHorizontalGroup(
            welcomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(welcomePanelLayout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addGroup(welcomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbWelcomeInfo)
                    .addComponent(lbWelcomeTitle))
                .addContainerGap(1098, Short.MAX_VALUE))
        );
        welcomePanelLayout.setVerticalGroup(
            welcomePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(welcomePanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(lbWelcomeTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbWelcomeInfo)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        listBillboardPanel.add(welcomePanel);
        welcomePanel.setBounds(384, 90, 1610, 160);

        lbAppName.setBackground(new java.awt.Color(51, 51, 51));
        lbAppName.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        lbAppName.setText("We ♥ BBCreator");
        listBillboardPanel.add(lbAppName);
        lbAppName.setBounds(470, 20, 137, 25);

        lbClose.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lbClose.setForeground(new java.awt.Color(54, 33, 89));
        lbClose.setText("X");
        lbClose.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        lbClose.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                lbCloseMousePressed(evt);
            }
        });
        listBillboardPanel.add(lbClose);
        lbClose.setBounds(1880, 10, 16, 32);

        lbUserInfo.setBackground(new java.awt.Color(51, 51, 51));
        lbUserInfo.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lbUserInfo.setText("Username: " + currentUser + "  ID: " + userId );
        listBillboardPanel.add(lbUserInfo);
        lbUserInfo.setBounds(1600, 15, 220, 22);

        fileChooserPanel.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout fileChooserPanelLayout = new javax.swing.GroupLayout(fileChooserPanel);
        fileChooserPanel.setLayout(fileChooserPanelLayout);
        fileChooserPanelLayout.setHorizontalGroup(
            fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 582, Short.MAX_VALUE)
            .addGroup(fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(fileImageChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fileXmlChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        fileChooserPanelLayout.setVerticalGroup(
            fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 399, Short.MAX_VALUE)
            .addGroup(fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileChooserPanelLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(fileChooserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(fileImageChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fileXmlChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        listBillboardPanel.add(fileChooserPanel);
        fileChooserPanel.setBounds(1190, 0, 582, 399);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(listBillboardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(listBillboardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lbIconHomebtn_homeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbIconHomebtn_homeMouseEntered

        btnHome.setBackground(new java.awt.Color(85,65,118));
    }//GEN-LAST:event_lbIconHomebtn_homeMouseEntered

    private void lbIconHomebtn_homeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbIconHomebtn_homeMouseExited

        btnHome.setBackground(new java.awt.Color(64, 43, 100));
    }//GEN-LAST:event_lbIconHomebtn_homeMouseExited

    private void lbHomebtn_homeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbHomebtn_homeMouseEntered

        btnHome.setBackground(new java.awt.Color(85,65,118));
    }//GEN-LAST:event_lbHomebtn_homeMouseEntered

    private void lbHomebtn_homeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbHomebtn_homeMouseExited

        btnHome.setBackground(new java.awt.Color(64, 43, 100));
    }//GEN-LAST:event_lbHomebtn_homeMouseExited

    private void btnHomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHomeMouseEntered
        btnHome.setBackground(new java.awt.Color(85,65,118));
    }//GEN-LAST:event_btnHomeMouseEntered

    private void btnHomeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnHomeMouseExited
        btnHome.setBackground(new java.awt.Color(64, 43, 100));
    }//GEN-LAST:event_btnHomeMouseExited

    private void lbIconListlb_list_billboardsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbIconListlb_list_billboardsMouseEntered
        btnList.setBackground(new java.awt.Color(85,65,118));
    }//GEN-LAST:event_lbIconListlb_list_billboardsMouseEntered

    private void lbIconListlb_list_billboardsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbIconListlb_list_billboardsMouseExited
        btnList.setBackground(new java.awt.Color(64, 43, 100));
    }//GEN-LAST:event_lbIconListlb_list_billboardsMouseExited

    private void lbListMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbListMouseEntered
        btnList.setBackground(new java.awt.Color(85,65,118));
    }//GEN-LAST:event_lbListMouseEntered

    private void lbListMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbListMouseExited
        btnList.setBackground(new java.awt.Color(64, 43, 100));
    }//GEN-LAST:event_lbListMouseExited

    private void jLabel14lb_schedule_billboardsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14lb_schedule_billboardsMouseEntered
        btnSchedule.setBackground(new java.awt.Color(85,65,118));
    }//GEN-LAST:event_jLabel14lb_schedule_billboardsMouseEntered

    private void jLabel14lb_schedule_billboardsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14lb_schedule_billboardsMouseExited
        btnSchedule.setBackground(new java.awt.Color(64, 43, 100));
    }//GEN-LAST:event_jLabel14lb_schedule_billboardsMouseExited

    private void lbScheduleMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbScheduleMouseEntered
        btnSchedule.setBackground(new java.awt.Color(85,65,118));
    }//GEN-LAST:event_lbScheduleMouseEntered

    private void lbScheduleMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbScheduleMouseExited
        btnSchedule.setBackground(new java.awt.Color(64, 43, 100));
    }//GEN-LAST:event_lbScheduleMouseExited

    private void btnSchedulelb_schedule_billboardsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSchedulelb_schedule_billboardsMouseEntered
        btnSchedule.setBackground(new java.awt.Color(85,65,118));
    }//GEN-LAST:event_btnSchedulelb_schedule_billboardsMouseEntered

    private void btnSchedulelb_schedule_billboardsMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSchedulelb_schedule_billboardsMouseExited

        btnSchedule.setBackground(new java.awt.Color(64, 43, 100));
    }//GEN-LAST:event_btnSchedulelb_schedule_billboardsMouseExited

    private void lbIconEditMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbIconEditMouseEntered

        btnEdit.setBackground(new java.awt.Color(85,65,118));
    }//GEN-LAST:event_lbIconEditMouseEntered

    private void lbIconEditMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbIconEditMouseExited

        btnEdit.setBackground(new java.awt.Color(64, 43, 100));
    }//GEN-LAST:event_lbIconEditMouseExited

    private void lbEditjLabel16MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbEditjLabel16MouseEntered

        btnEdit.setBackground(new java.awt.Color(85,65,118));
    }//GEN-LAST:event_lbEditjLabel16MouseEntered

    private void lbEditjLabel16MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbEditjLabel16MouseExited

        btnEdit.setBackground(new java.awt.Color(64, 43, 100));
    }//GEN-LAST:event_lbEditjLabel16MouseExited

    private void btnEditjLabel16MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditjLabel16MouseEntered

        btnEdit.setBackground(new java.awt.Color(85,65,118));
    }//GEN-LAST:event_btnEditjLabel16MouseEntered

    private void btnEditjLabel16MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditjLabel16MouseExited
        btnEdit.setBackground(new java.awt.Color(64, 43, 100));
    }//GEN-LAST:event_btnEditjLabel16MouseExited

    private void btnDeleteTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteTableActionPerformed
        // Select billboard to delete
        int removeIndex = billboardTable.getSelectedRow();
        if (removeIndex < 0) {
            JOptionPane.showMessageDialog(listBillboardPanel, "Choose a billboard to delete");
        } else if (listBillboard.size() == 0) {
            JOptionPane.showMessageDialog(listBillboardPanel, "No billboards to delete");
        } else {
            Billboard deleteBillboard = listBillboard.get(removeIndex);
            // If users have "EB" permission, they can delete any billboards
            if(this.permission.contains("EB")) {
                deleteBillboard(deleteBillboard);
            }
            // If users do not have "EB" permission, they only can delete their billboards which are not presently scheduled
            else if (this.permission.contains("CB")) {
                if (deleteBillboard.getUserId() != Integer.parseInt(this.userId)) {
                    JOptionPane.showMessageDialog(listBillboardPanel, "Can only delete your own billboard");
                } else if (isScheduledBillboard(deleteBillboard)) {
                    JOptionPane.showMessageDialog(listBillboardPanel, "Cannot delete billboard presently scheduled");
                } else {
                    deleteBillboard(deleteBillboard);
                }
            } else {
                JOptionPane.showMessageDialog(listBillboardPanel, "Do not have permission");
            }
        }


    }//GEN-LAST:event_btnDeleteTableActionPerformed

    private void lbCloseMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbCloseMousePressed
        System.exit(0);
    }//GEN-LAST:event_lbCloseMousePressed

    private void btnEditTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditTableActionPerformed
        // Select billboard to edit
        selectedIndex = billboardTable.getSelectedRow();
        if (listBillboard.size() == 0){
            JOptionPane.showMessageDialog(listBillboardPanel, "Add more billboards to edit");
        }else if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(listBillboardPanel, "Choose a billboard to start editting");
        }else {
            Billboard editBillboard = listBillboard.get(selectedIndex);
            // If users have "EB" permission, they can edit any billboards
            if(this.permission.contains("EB")) {
                setEditData(listBillboard.get(selectedIndex));
                inputPanel.setVisible(true);
            }
            // If users do not have "EB" permission, they only can delete their billboards which are not presently scheduled
            else if (this.permission.contains("CB")) {
                if (editBillboard.getUserId() != Integer.parseInt(this.userId)) {
                    JOptionPane.showMessageDialog(listBillboardPanel, "Can only edit your own billboard");
                } else if (isScheduledBillboard(editBillboard)) {

                    JOptionPane.showMessageDialog(listBillboardPanel, "Cannot edit billboard presently scheduled");
                } else {
                    setEditData(listBillboard.get(selectedIndex));
                    inputPanel.setVisible(true);
                }
            } else {
                JOptionPane.showMessageDialog(listBillboardPanel, "Do not have permission");
            }
        }

    }//GEN-LAST:event_btnEditTableActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        inputPanel.setVisible(false);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String message, information, backgroundColor, msColor, infoColor, picture, billboardId;
        boolean isOk = true, isNotOverflowed = true, isValidInfo = true, isValidImage = true, isValidColor = true;

        // Get billboard information from input fields
        message = txtMessage.getText();
        information = txtInformation.getText();
        backgroundColor = txtBgColor.getText();
        msColor = txtMsColor.getText();
        infoColor = txtInfoColor.getText();
        picture = txtPicture.getText();
        billboardId = txtBillboardId.getText();

        // Check if all input fields are valid
        if (message.isEmpty() && information.isEmpty() && picture.isEmpty()) {
            isOk = false;
            isValidInfo = false;
        }
        if (backgroundColor.isEmpty() || msColor.isEmpty() || infoColor.isEmpty()) {
            isOk = false;
            isValidInfo = false;
        } else {
            if (!ColorHelper.isHexString(backgroundColor) || !ColorHelper.isHexString(msColor) || !ColorHelper.isHexString(infoColor)){
                isOk = false;
                isValidColor = false;
            }
        }

        if (message.isEmpty()) {
            message = null;
        }
        if (information.isEmpty()) {
            information = null;
        }
        if (picture.isEmpty()){
            picture = null;
        } else {
            if (!picture.startsWith("http://") && !picture.startsWith("https://")) {
                if (!ImageFormatter.isBase64String(picture)) {
                    picture = ImageFormatter.pathToData(picture);
                    if (picture == null) {
                        isOk = false;
                        isValidImage = false;
                    }
                }

            }
        }


        // If all input fields are valid
        if(isOk) {

            try{
                // Connect to server
                ServerConnection svCon = new ServerConnection();
                EditBillboardRequest req = new EditBillboardRequest();
                req.setToken(this.token);
                req.setBackgroundColor(backgroundColor);
                req.setBillboard_id(billboardId);
                req.setInformation(information);
                req.setMessage(message);
                req.setMessageColor(msColor);
                req.setPicture(picture);
                req.setInfoColor(infoColor);
                try{
                    svCon.sendRequest(req);
                }catch(BufferOverflowException e){
                    isNotOverflowed = false;
                    JOptionPane.showMessageDialog(listBillboardPanel, "The image is too big to upload");
                }
                // Get response message from server
                EditBillboardResponse res = (EditBillboardResponse) Message.nextMessageFromSocket(svCon.getChannel(), svCon.getByteBuffer());
                if (res.isSuccessful()) {
                    JOptionPane.showMessageDialog(listBillboardPanel, "Edit successfully");
                    new ListBillboardsPage(token).setVisible(true);
                    this.dispose();
                    inputPanel.setVisible(false);
                } else {
                    JOptionPane.showMessageDialog(listBillboardPanel, res.getMessage());
                    if(res.sessionExpired()){
                        System.exit(0);
                    }
                }
            }
            catch (IOException | ServerClosedException e) {
                JOptionPane.showMessageDialog(listBillboardPanel, e.getMessage());
                System.exit(0);
            }
        } else {
            if(!isValidInfo) {
                JOptionPane.showMessageDialog(listBillboardPanel, "Please describe your billboard first");
            } else if (!isValidImage) {
                JOptionPane.showMessageDialog(listBillboardPanel, "Cannot find image file");
            } else if (!isValidColor) {
                JOptionPane.showMessageDialog(listBillboardPanel, "Color is not valid");
            }
        }




        
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void lbIconHomeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbIconHomeMousePressed
        new Home(token).setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_lbIconHomeMousePressed

    private void btnListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnListMousePressed

    }//GEN-LAST:event_btnListMousePressed

    private void btnCreateMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateMouseEntered
        btnCreate.setBackground(new java.awt.Color(85,65,118));
    }//GEN-LAST:event_btnCreateMouseEntered

    private void btnCreateMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateMouseExited
        btnCreate.setBackground(new java.awt.Color(64, 43, 100));
    }//GEN-LAST:event_btnCreateMouseExited

    private void btnCreateMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateMousePressed
        // Access Create Billboards Page if users have "CB" permission
        if (this.permission.contains("CB")) {
            CreateBillboardsPage createBillboardsPage = new CreateBillboardsPage(token);
            createBillboardsPage.setVisible(true);
            this.setVisible(false);
        }
        else {
            JOptionPane.showMessageDialog(listBillboardPanel, "Do not have permission");
        }
    }//GEN-LAST:event_btnCreateMousePressed

    private void btnEditMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditMousePressed
        EditUserPage editUserPage = new EditUserPage(token);
        editUserPage.setVisible(true);
        this.setVisible(false);
    }//GEN-LAST:event_btnEditMousePressed

    private void lbScheduleMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbScheduleMousePressed
        // Access Schedule Billboards Page if users have "SB" permission
        if (this.permission.contains("SB")) {
            ScheduleBillboardsPage scheduleBillboardsPage = new ScheduleBillboardsPage(token);
            scheduleBillboardsPage.setVisible(true);
            this.setVisible(false);
        }
        else {
            JOptionPane.showMessageDialog(listBillboardPanel, "Do not have permission");
        }
    }//GEN-LAST:event_lbScheduleMousePressed

    private void lbLogoutMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbLogoutMousePressed
        try{
            // Connect to server to send log out request
            ServerConnection svCon = new ServerConnection();
            svCon.sendRequest(new LogoutRequest());
            new LogIn().setVisible(true);
            this.dispose();
        } catch (ServerClosedException e) {
            JOptionPane.showMessageDialog(listBillboardPanel, e.getMessage());
            System.exit(0);
        }
    }//GEN-LAST:event_lbLogoutMousePressed

    private void btnChooseBgColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseBgColorActionPerformed
        // Show JColorChooser for background color
        Color c = JColorChooser.showDialog(null, "Choose a Color", txtBgColor.getForeground());
        if (c != null) {
        txtBgColor.setText(String.format("#%02X%02X%02X", c.getRed(), c.getGreen(), c.getBlue()));
        }
    }//GEN-LAST:event_btnChooseBgColorActionPerformed

    private void btnChooseMsColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseMsColorActionPerformed
        // Show JColorChooser for font color
        Color c = JColorChooser.showDialog(null, "Choose a Color", txtBgColor.getForeground());
        if (c != null) {
            txtMsColor.setText(String.format("#%02X%02X%02X", c.getRed(), c.getGreen(), c.getBlue()));
        }
    }//GEN-LAST:event_btnChooseMsColorActionPerformed

    private void btnChooseImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseImageActionPerformed
        // Show JImageChooser for choosing image from local storage
        fileImageChooser.setVisible(true);
        int returnVal = fileImageChooser.showOpenDialog(null);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileImageChooser.getSelectedFile();
            txtPicture.setText(file.getAbsolutePath());
        } else {
            System.out.println("Cannot find file");
        }
    }//GEN-LAST:event_btnChooseImageActionPerformed

    private void txtPictureMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtPictureMouseClicked
        txtPicture.setText("");
    }//GEN-LAST:event_txtPictureMouseClicked

    private void btnChooseInfoColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseInfoColorActionPerformed
        // Show JColorChooser for information color
        Color c = JColorChooser.showDialog(null, "Choose a Color", txtBgColor.getForeground());
        if (c != null) {
            txtInfoColor.setText(String.format("#%02X%02X%02X", c.getRed(), c.getGreen(), c.getBlue()));
        }
    }//GEN-LAST:event_btnChooseInfoColorActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        String message, information, backgroundColor, msColor, infoColor, picture;
        WritingToXml w = new WritingToXml();
        boolean isOk = true, isValidColor = true, isValidContent = true, isValidImage = true;

        message = txtMessage.getText();
        information = txtInformation.getText();
        backgroundColor = txtBgColor.getText();
        msColor = txtMsColor.getText();
        picture = txtPicture.getText();
        infoColor = txtInfoColor.getText();

        // Check if all input fields are valid
        if ((message.isEmpty() && information.isEmpty() && picture.isEmpty()) ) {
            isOk = false;
            isValidContent = false;
        }
        if (backgroundColor.isEmpty() || msColor.isEmpty() || infoColor.isEmpty()) {
            isOk = false;
            isValidColor = false;
        }else {
            if (!ColorHelper.isHexString(backgroundColor) || !ColorHelper.isHexString(msColor)){
                isOk = false;
                isValidColor = false;
            }
        }

        if (picture.isEmpty()){
            picture = "";
        } else {
            if (!picture.startsWith("http://") && !picture.startsWith("https://")) {
                if (!ImageFormatter.isBase64String(picture)) {
                    picture = ImageFormatter.pathToData(picture);
                    if (picture == null) {
                        isOk = false;
                        isValidImage = false;
                    }
                }

            }
        }

        // If all input fields are valid, export billboard to an xml file
        if (isOk) {
            w.setBackgroundColor(backgroundColor);
            w.setMessageColor(msColor);
            w.setInfoColor(infoColor);
            w.setFileName(txtMessage.getText() + userId + ".xml");
            w.setInformation(information);
            w.setMessage(message);
            if (!picture.startsWith("http://") && !picture.startsWith("https://")) {
                w.setData(picture);
                w.setPictureUrl("");

            } else  {
                w.setData("");
                w.setPictureUrl(picture);
            }

            w.generateXml();
            JOptionPane.showMessageDialog(listBillboardPanel, "Export successfully!");
        } else {
            if (!isValidContent)
            JOptionPane.showMessageDialog(listBillboardPanel, "Please describe your billboard first");
            else if (!isValidColor)
            JOptionPane.showMessageDialog(listBillboardPanel, "Please choose the color");
            else if (!isValidImage)
            JOptionPane.showMessageDialog(listBillboardPanel, "Cannot find image");
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImportActionPerformed
        int returnVal = fileXmlChooser.showOpenDialog(null);

        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try{
                File file = fileXmlChooser.getSelectedFile();
                //This is where a real application would open the file.
                ReadXmlFile reader = new ReadXmlFile();
                reader.setXmlFile(file);
                reader.readFile();

                //Set text according to xml file
                txtBgColor.setText(reader.getBackgroundColor());
                txtMsColor.setText(reader.getMessageColor());
                txtInfoColor.setText(reader.getInfoColor());
                txtPicture.setText(reader.getPictureUrl());
                txtInformation.setText(reader.getInformation());
                txtMessage.setText(reader.getMessage());
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(listBillboardPanel, "Invalid .xml file");
            }

        } else {
            System.out.println("Cannot find file");
        }
    }//GEN-LAST:event_btnImportActionPerformed

    private void btnPreviewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviewActionPerformed

        containerPanelMPI.setVisible(false);
        containerPanelM.setVisible(false);
        containerPanelP.setVisible(false);
        containerPanelI.setVisible(false);
        containerPanelMP.setVisible(false);
        containerPanelMI.setVisible(false);
        containerPanelPI.setVisible(false);

        String message = "", information = "", bgColor = "#FFFFFF", msColor = "#000000", infoColor= "#000000", picture ="";
        boolean isOk = true, isValidColor = true, isValidInfo = true, isValidImage = true;

        // Select billboard to edit
        selectedIndex = billboardTable.getSelectedRow();
        if (listBillboard.size() == 0){
            JOptionPane.showMessageDialog(listBillboardPanel, "No billboard to preview");
            isOk = false;
        }else if (selectedIndex < 0) {
            JOptionPane.showMessageDialog(listBillboardPanel, "Choose a billboard to preview");
            isOk = false;
        }else {
            Billboard previewBillboard = listBillboard.get(selectedIndex);
            message = previewBillboard.getMessage().equals("null") ? "" : previewBillboard.getMessage();
            information = previewBillboard.getInformation().equals("null") ? "" : previewBillboard.getInformation();
            bgColor = previewBillboard.getBackgroundColor();
            msColor = previewBillboard.getMessageColor();
            picture = previewBillboard.getPicture().equals("null") ? "" : previewBillboard.getPicture();
            infoColor = previewBillboard.getInfoColor();

        }

        // If all input fields are valid, preview the frame according to input fields
        if (isOk) {
            billboard_preview_frame.setVisible(true);
            // Preview billboard with message, information and picture
            if(!message.isEmpty() && !picture.isEmpty() && !information.isEmpty()) {
                containerPanelMPI.setVisible(true);
                containerPanelM.setVisible(false);
                containerPanelP.setVisible(false);
                containerPanelI.setVisible(false);
                containerPanelMP.setVisible(false);
                containerPanelMI.setVisible(false);
                containerPanelPI.setVisible(false);

                containerPanelMPI.setBackground(ColorHelper.hex2Rgb(bgColor));
                lbMessageMPI.setForeground(ColorHelper.hex2Rgb(msColor));
                lbInfoMPI.setForeground(ColorHelper.hex2Rgb(infoColor));

                lbMessageMPI.setText("<html><body style='text-align: center'>"+ message + "</html>");
                lbInfoMPI.setText("<html><body style='text-align: center'>"+ information + "</html>");
                try {

                    if (picture.contains("https:") || picture.contains("http:")) {
                        URL url = new URL(picture);
                        Image image = ImageIO.read(url);
                        image = image.getScaledInstance(-1, lbPictureMPI.getPreferredSize().height,Image.SCALE_SMOOTH);
                        lbPictureMPI.setIcon(new ImageIcon(image));
                    }else {
                        byte[] imageBytes = Base64.getDecoder().decode(picture);
                        Image image = ImageIO.read(new ByteArrayInputStream(imageBytes));
                        image = image.getScaledInstance(-1, lbPictureMPI.getPreferredSize().height,Image.SCALE_SMOOTH);
                        lbPictureMPI.setIcon(new ImageIcon(image));
                    }

                } catch (Exception ex){
                    ex.printStackTrace();
                    billboard_preview_frame.setVisible(false);
                    JOptionPane.showMessageDialog(listBillboardPanel, "Cannot load image");

                }

            }
            // Preview billboard with message
            else if (!message.equals("") && picture.equals("") && information.equals("") ) {
                containerPanelMPI.setVisible(false);
                containerPanelM.setVisible(true);
                containerPanelP.setVisible(false);
                containerPanelI.setVisible(false);
                containerPanelMP.setVisible(false);
                containerPanelMI.setVisible(false);
                containerPanelPI.setVisible(false);

                containerPanelM.setBackground(ColorHelper.hex2Rgb(bgColor));
                lbMessageM.setText("<html><body style='text-align: center'>"+ message + "</html>");
                lbMessageM.setForeground(ColorHelper.hex2Rgb(msColor));

            }
            // Preview billboard with picture
            else if (message.equals("") && !picture.equals("") && information.equals("") ) {
                containerPanelMPI.setVisible(false);
                containerPanelM.setVisible(false);
                containerPanelP.setVisible(true);
                containerPanelI.setVisible(false);
                containerPanelMP.setVisible(false);
                containerPanelMI.setVisible(false);
                containerPanelPI.setVisible(false);

                containerPanelP.setBackground(ColorHelper.hex2Rgb(bgColor));
                try {

                    if (picture.contains("https:") || picture.contains("http:")) {
                        URL url = new URL(picture);
                        Image image = ImageIO.read(url);
                        image = image.getScaledInstance(-1, lbPictureP.getPreferredSize().height,Image.SCALE_SMOOTH);
                        lbPictureP.setIcon(new ImageIcon(image));
                    }else {
                        byte[] imageBytes = Base64.getDecoder().decode(picture);
                        Image image = ImageIO.read(new ByteArrayInputStream(imageBytes));
                        image = image.getScaledInstance(-1, lbPictureP.getPreferredSize().height,Image.SCALE_SMOOTH);
                        lbPictureP.setIcon(new ImageIcon(image));
                    }

                } catch (Exception ex){
                    billboard_preview_frame.setVisible(false);
                    JOptionPane.showMessageDialog(listBillboardPanel, "Cannot load image");

                }

            }
            // Preview billboard with picture
            else if (message.equals("") && picture.equals("") && !information.equals("") ) {
                containerPanelMPI.setVisible(false);
                containerPanelM.setVisible(false);
                containerPanelP.setVisible(false);
                containerPanelI.setVisible(true);
                containerPanelMP.setVisible(false);
                containerPanelMI.setVisible(false);
                containerPanelPI.setVisible(false);

                containerPanelI.setBackground(ColorHelper.hex2Rgb(bgColor));

                lbInfoI.setText("<html><body style='text-align: center'>"+ information + "</html>");
                lbInfoI.setForeground(ColorHelper.hex2Rgb(infoColor));

            }
            // Preview billboard with message and picture
            else if (!message.equals("") && !picture.equals("") && information.equals("") ) {
                containerPanelMPI.setVisible(false);
                containerPanelM.setVisible(false);
                containerPanelP.setVisible(false);
                containerPanelI.setVisible(false);
                containerPanelMP.setVisible(true);
                containerPanelMI.setVisible(false);
                containerPanelPI.setVisible(false);

                containerPanelMP.setBackground(ColorHelper.hex2Rgb(bgColor));

                lbMessageMP.setText("<html><body style='text-align: center'>"+ message + "</html>");
                lbMessageMP.setForeground(ColorHelper.hex2Rgb(msColor));

                try {

                    if (picture.contains("https:") || picture.contains("http:")) {
                        URL url = new URL(picture);
                        Image image = ImageIO.read(url);
                        image = image.getScaledInstance(-1, lbPictureMP.getPreferredSize().height,Image.SCALE_SMOOTH);
                        lbPictureMP.setIcon(new ImageIcon(image));
                    }else {
                        byte[] imageBytes = Base64.getDecoder().decode(picture);
                        Image image = ImageIO.read(new ByteArrayInputStream(imageBytes));
                        image = image.getScaledInstance(-1, lbPictureMP.getPreferredSize().height,Image.SCALE_SMOOTH);
                        lbPictureMP.setIcon(new ImageIcon(image));
                    }

                } catch (Exception ex){
                    billboard_preview_frame.setVisible(false);
                    JOptionPane.showMessageDialog(listBillboardPanel, "Cannot load image");

                }

            }
            // Preview billboard with message and information
            else if (!message.equals("") && picture.equals("") && !information.equals("") ) {
                containerPanelMPI.setVisible(false);
                containerPanelM.setVisible(false);
                containerPanelP.setVisible(false);
                containerPanelI.setVisible(false);
                containerPanelMP.setVisible(false);
                containerPanelMI.setVisible(true);
                containerPanelPI.setVisible(false);

                containerPanelMI.setBackground(ColorHelper.hex2Rgb(bgColor));
                lbMessageMI.setText("<html><body style='text-align: center'>"+ message + "</html>");
                lbMessageMI.setForeground(ColorHelper.hex2Rgb(msColor));

                lbInfoMI.setText("<html><body style='text-align: center'>"+ information + "</html>");
                lbInfoMI.setForeground(ColorHelper.hex2Rgb(infoColor));

            }
            // Preview billboard with information and picture
            else if (message.equals("") && !picture.equals("") && !information.equals("") ) {
                containerPanelMPI.setVisible(false);
                containerPanelM.setVisible(false);
                containerPanelP.setVisible(false);
                containerPanelI.setVisible(false);
                containerPanelMP.setVisible(false);
                containerPanelMI.setVisible(false);
                containerPanelPI.setVisible(true);

                containerPanelPI.setBackground(ColorHelper.hex2Rgb(bgColor));

                lbInfoPI.setText("<html><body style='text-align: center'>"+ information + "</html>");
                lbInfoPI.setForeground(ColorHelper.hex2Rgb(infoColor));

                try {
                    if (picture.contains("https:") || picture.contains("http:")) {
                        URL url = new URL(picture);
                        Image image = ImageIO.read(url);
                        image = image.getScaledInstance(-1, lbPicturePI.getPreferredSize().height,Image.SCALE_SMOOTH);
                        lbPicturePI.setIcon(new ImageIcon(image));
                    }else {
                        byte[] imageBytes = Base64.getDecoder().decode(picture);
                        Image image = ImageIO.read(new ByteArrayInputStream(imageBytes));
                        image = image.getScaledInstance(-1, lbPicturePI.getPreferredSize().height,Image.SCALE_SMOOTH);
                        lbPicturePI.setIcon(new ImageIcon(image));
                    }

                } catch (Exception ex){
                    billboard_preview_frame.setVisible(false);
                    JOptionPane.showMessageDialog(listBillboardPanel, "Cannot load image");

                }
            }
        }else {
            billboard_preview_frame.setVisible(false);
            if (!isValidInfo)
            JOptionPane.showMessageDialog(listBillboardPanel, "Input enough field to preview billboard");
            else if (!isValidImage)
            JOptionPane.showMessageDialog(listBillboardPanel, "Cannot find image");
            else if (!isValidColor)
            JOptionPane.showMessageDialog(listBillboardPanel, "The color is not valid");
        }
    }//GEN-LAST:event_btnPreviewActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable billboardTable;
    private javax.swing.JInternalFrame billboard_preview_frame;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChooseBgColor;
    private javax.swing.JButton btnChooseImage;
    private javax.swing.JButton btnChooseInfoColor;
    private javax.swing.JButton btnChooseMsColor;
    private javax.swing.JPanel btnCreate;
    private javax.swing.JButton btnDeleteTable;
    private javax.swing.JPanel btnEdit;
    private javax.swing.JButton btnEditTable;
    private javax.swing.JButton btnExport;
    private javax.swing.JPanel btnHome;
    private javax.swing.JButton btnImport;
    private javax.swing.JPanel btnList;
    private javax.swing.JPanel btnLogOut;
    private javax.swing.JButton btnPreview;
    private javax.swing.JButton btnSave;
    private javax.swing.JPanel btnSchedule;
    private javax.swing.JPanel containerPanelI;
    private javax.swing.JPanel containerPanelM;
    private javax.swing.JPanel containerPanelMI;
    private javax.swing.JPanel containerPanelMP;
    private javax.swing.JPanel containerPanelMPI;
    private javax.swing.JPanel containerPanelP;
    private javax.swing.JPanel containerPanelPI;
    private javax.swing.JPanel fileChooserPanel;
    private javax.swing.JFileChooser fileImageChooser;
    private javax.swing.JFileChooser fileXmlChooser;
    private javax.swing.JPanel inputPanel;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel lbAppName;
    private javax.swing.JLabel lbAppNameLeft;
    private javax.swing.JLabel lbBackground;
    private javax.swing.JLabel lbBgColor;
    private javax.swing.JLabel lbBillboardId;
    private javax.swing.JLabel lbClose;
    private javax.swing.JLabel lbCreate;
    private javax.swing.JLabel lbEdit;
    private javax.swing.JLabel lbHome;
    private javax.swing.JLabel lbIconCreate;
    private javax.swing.JLabel lbIconEdit;
    private javax.swing.JLabel lbIconHome;
    private javax.swing.JLabel lbIconList;
    private javax.swing.JLabel lbIconLogout;
    private javax.swing.JLabel lbInfo;
    private javax.swing.JLabel lbInfoColor;
    private javax.swing.JLabel lbInfoI;
    private javax.swing.JLabel lbInfoMI;
    private javax.swing.JLabel lbInfoMPI;
    private javax.swing.JLabel lbInfoPI;
    private javax.swing.JLabel lbInputTitle;
    private javax.swing.JLabel lbList;
    private javax.swing.JLabel lbListTitle;
    private javax.swing.JLabel lbLogout;
    private javax.swing.JLabel lbMessage;
    private javax.swing.JLabel lbMessageM;
    private javax.swing.JLabel lbMessageMI;
    private javax.swing.JLabel lbMessageMP;
    private javax.swing.JLabel lbMessageMPI;
    private javax.swing.JLabel lbMsColor;
    private javax.swing.JLabel lbPicture;
    private javax.swing.JLabel lbPictureMP;
    private javax.swing.JLabel lbPictureMPI;
    private javax.swing.JLabel lbPictureP;
    private javax.swing.JLabel lbPicturePI;
    private javax.swing.JLabel lbSchedule;
    private javax.swing.JLabel lbUserInfo;
    private javax.swing.JLabel lbWelcomeInfo;
    private javax.swing.JLabel lbWelcomeTitle;
    private javax.swing.JPanel listBillboardPanel;
    private javax.swing.JPanel listPanel;
    private javax.swing.JScrollPane listScrollPanel;
    private javax.swing.JSeparator separator;
    private javax.swing.JPanel sidepanel;
    private javax.swing.JScrollPane textScrollPanel;
    private javax.swing.JTextField txtBgColor;
    private javax.swing.JTextField txtBillboardId;
    private javax.swing.JTextField txtInfoColor;
    private javax.swing.JTextArea txtInformation;
    private javax.swing.JTextField txtMessage;
    private javax.swing.JTextField txtMsColor;
    private javax.swing.JTextField txtPicture;
    private javax.swing.JPanel welcomePanel;
    // End of variables declaration//GEN-END:variables

    /**
     * Set input fields in edit data panel
     * @param b - selected billboard
     */
    private void setEditData(Billboard b) {


        String message, information, bgColor , msColor, infoColor, picture;

        message = b.getMessage().equals("null") ? "" : b.getMessage();
        information = b.getInformation().equals("null") ? "" : b.getInformation();
        bgColor = b.getBackgroundColor();
        msColor =  b.getMessageColor();
        picture = b.getPicture().equals("null") ? "" : b.getPicture();
        infoColor =  b.getInfoColor();

        txtMessage.setText(message);
        txtInformation.setText(information);
        txtBgColor.setText(bgColor);
        txtMsColor.setText(msColor);
        txtInfoColor.setText(infoColor);
        txtPicture.setText(picture);
        txtBillboardId.setText(Integer.toString(b.getBillboardId()));
        txtBillboardId.setEditable(false);
    }

    /**
     * Send delete billboard request to server
     * @param deleteBillboard - billboard to delete
     */
    private void deleteBillboard(Billboard deleteBillboard) {
        try{
            // Connect to server
            ServerConnection svCon = new ServerConnection();
            DeleteBillboardRequest req = new DeleteBillboardRequest();
            req.setToken(this.token);
            req.setBillboard_id(Integer.toString(deleteBillboard.getBillboardId()));
            svCon.sendRequest(req);
            // Get response message
            DeleteBillboardResponse res = (DeleteBillboardResponse) Message.nextMessageFromSocket(svCon.getChannel(), svCon.getByteBuffer());
            if (res.isSuccessful())
                JOptionPane.showMessageDialog(listBillboardPanel, "Delete successfully!");
            else{
                JOptionPane.showMessageDialog(listBillboardPanel, res.getMessage());
                if(res.sessionExpired()){
                    System.exit(0);
                }
            }
            new ListBillboardsPage(token).setVisible(true);
            this.dispose();
        }  catch (IOException | ServerClosedException e) {
            JOptionPane.showMessageDialog(listBillboardPanel, e.getMessage());
            System.exit(0);
        }
    }

    /**
     * Check if a billboard is scheduled or not
     * @param b - billboard to check
     * @return true if the billboard is scheduled, false if not
     */
    private boolean isScheduledBillboard(Billboard b){
        for (Schedule s : listSchedule) {
            if (s.getBillboardId() == b.getBillboardId()) {
                return true;
            }
        }
        return false;
    }

    /**
     * Show table displaying billboard information
     */
    private void showTable() {
        model.setRowCount(0);
        for (Billboard b : listBillboard) {
            model.addRow(new Object[]{
                    b.getBillboardId(), b.getUserId(), b.getMessage(), b.getInformation(), b.getBackgroundColor(), b.getMessageColor(), b.getInfoColor(), b.getCreatedAt(), b.getUpdateAt(), b.getPicture()
            });
        }
    }


}
